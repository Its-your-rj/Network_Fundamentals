Name- Raj Mehta
Rollno-22BCE183
Subject- Computer networks
Practical -3

Socket Programming

1)server 

code:
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define PORT 81
#define BUFFER_SIZE 1024

int main() {
  int server_fd, new_socket;
  struct sockaddr_in address;
  int addrlen = sizeof(address);
  char buffer[BUFFER_SIZE] = {0};

  // Create socket file descriptor
  if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
    perror("socket failed");
    exit(EXIT_FAILURE);
  }

  // Set socket options
  int opt = 1;
  if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt,
                 sizeof(opt))) {
    perror("setsockopt failed");
    close(server_fd);
    exit(EXIT_FAILURE);
  }

  // Define the server address
  address.sin_family = AF_INET;
  address.sin_addr.s_addr = INADDR_ANY;
  address.sin_port = htons(PORT);

  // Bind the socket to the address
  if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
    perror("bind failed");
    close(server_fd);
    exit(EXIT_FAILURE);
  }

  // Listen for incoming connections
  if (listen(server_fd, 3) < 0) {
    perror("listen failed");
    close(server_fd);
    exit(EXIT_FAILURE);
  }

  printf("Server listening on port %d\n", PORT);

  // Accept and handle incoming connections
  while ((new_socket = accept(server_fd, (struct sockaddr *)&address,
                              (socklen_t *)&addrlen)) >= 0) {
    int read_size;
    while ((read_size = read(new_socket, buffer, BUFFER_SIZE)) > 0) {
      printf("Received: %s", buffer);
      send(new_socket, buffer, read_size, 0);
    }

    if (read_size == 0) {
      printf("Client disconnected\n");
      close(new_socket);
    } else if (read_size == -1) {
      perror("recv failed");
      close(new_socket);
    }

    memset(buffer, 0, BUFFER_SIZE);
  }

  if (new_socket < 0) {
    perror("accept failed");
    close(server_fd);
    exit(EXIT_FAILURE);
  }

  close(server_fd);
  return 0;
}


2)Client
Code:
#include <arpa/inet.h>
#include <netdb.h> // Include for gethostbyname
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define PORT 81
#define BUFFER_SIZE 1024

int main() {
  int sock = 0;
  struct sockaddr_in serv_addr;
  struct hostent *server;
  char buffer[BUFFER_SIZE] = {0};
  char message[BUFFER_SIZE];

  // Create socket file descriptor
  if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    perror("Socket creation error");
    exit(EXIT_FAILURE);
  }

  serv_addr.sin_family = AF_INET;
  serv_addr.sin_port = htons(PORT);

  // Resolve the hostname provided by Repl.it to an IP address
  server = gethostbyname("88523a85-72c0-45cd-8526-8b36125f31a2-00-i7tougm67s48."
                         "pike.replit.dev"); // Replace with your server URL
  if (server == NULL) {
    perror("Error: No such host");
    exit(EXIT_FAILURE);
  }

  bcopy((char *)server->h_addr, (char *)&serv_addr.sin_addr.s_addr,
        server->h_length);

  // Connect to the server
  if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
    perror("Connection Failed");
    exit(EXIT_FAILURE);
  }

  while (1) {
    printf("Enter message: ");
    fgets(message, BUFFER_SIZE, stdin);

    send(sock, message, strlen(message), 0);
    printf("Message sent\n");

    int valread = read(sock, buffer, BUFFER_SIZE);
    printf("Echo from server: %s\n", buffer);

    memset(buffer, 0, BUFFER_SIZE);
    memset(message, 0, BUFFER_SIZE);
  }

  close(sock);
  return 0;
}


Output:


